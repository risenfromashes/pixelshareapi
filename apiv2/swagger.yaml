openapi: 3.0.0
info:
  title: PixelShare_API
  description: |
    This is an API hehe42 documentation for our CSE 408 project PixelShare.
  version: 1.0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ASHRAFURKHAN37/PixelShare/1.0.1
  - url: https://virtserver.swaggerhub.com/fariamou/PixelShare/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://PixelShare.com
paths:
  /register:
    post:
      tags:
        - General
      summary: Register a new user
      description: Endpoint to register a new user.
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_body'
        required: true
      responses:
        '200':
          description: User successfully registered
        '400':
          description: Bad request - Invalid input
        '500':
          description: Internal Server Error
  /login:
    post:
      tags:
        - General
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        '400':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
  /logout:
    post:
      tags:
        - General
      summary: User logout
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        '400':
          description: Internal Error
  /get-posts:
    summary: Operations related to posts
    get:
      summary: Get all posts
      tags:
        - Posts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    post_id:
                      type: integer
                    user_id:
                      type: integer
                    username:
                      type: string
                    image_url:
                      type: string
                    caption:
                      type: string
                    created_at:
                      type: string
                      format: date-time
  /approve-post/{post_id}:
      post:
        summary: Approve a post by post_id
        parameters:
          - name: post_id
            in: path
            required: true
            description: ID of the post to be approved
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin_approval:
                    type: boolean
                    default: true
        tags:
          - Posts
        responses:
          '200':
            description: Successful approval
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Post approved successfully
          '400':
            description: Post not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Post not found
                    message:
                      type: string
                      example: The specified post ID does not exist

  /reject-post/{post_id}:
      post:
        summary: Reject a post by post_id
        parameters:
          - name: post_id
            in: path
            required: true
            description: ID of the post to be rejected
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin_approval:
                    type: boolean
                    default: false
        tags:
          - Posts
        responses:
          '200':
            description: Successful rejection
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Post rejected successfully
          '400':
            description: Post not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Post not found
                    message:
                      type: string
                      example: The specified post ID does not exist
  /get-all-members/{group_id}:
    summary: Operations related to members
    get:
      summary: Get all members
      parameters:
          - name: group_id
            in: path
            required: true
            description: ID of the group to view all members
            schema:
              type: integer
      tags:
        - Members
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                    email:
                      type: string
                    registration_status:
                      type: string
                      description: Status of member registration (e.g., "pending", "approved", "rejected")

  /member-approve/{user_id}:
    post:
      summary: Approve member registration by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the member to be approved
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_approval:
                  type: boolean
                  default: true
      tags:
        - Members
      responses:
        '200':
          description: Successful member approval
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member approved successfully
        '400':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Member not found
                  message:
                    type: string
                    example: The specified member ID does not exist

  /member-reject/{user_id}:
    post:
      summary: Reject member registration by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the member to be rejected
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_approval:
                  type: boolean
                  default: false
      tags:
        - Members
      responses:
        '200':
          description: Successful member rejection
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member rejected successfully
        '400':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Member not found
                  message:
                    type: string
                    example: The specified member ID does not exi
                    
  /get-member-requests:
    get:
      summary: View member requests with some posts
      tags:
        - Members
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: integer
                    username:
                      type: string
                    email:
                      type: string
                    registration_status:
                      type: string
                      description: Status of member registration (e.g., "pending")
                      
  /remove-member/{user_id}:
    delete:
      summary: Remove a member by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the member to be removed
          schema:
            type: integer
      tags:
        - Members
      responses:
        '200':
          description: Successful member removal
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member removed successfully
        '400':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Member not found
                  message:
                    type: string
                    example: The specified member ID does not exist
                  
components:
  schemas:
    register_body:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    login_body:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    inline_response_200:
      type: object
      properties:
        token:
          type: string
          description: Access token for authenticated user
        userId:
          type: integer
          description: ID of the authenticated user
    inline_response_400:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: Invalid username or password
    inline_response_200_1:
      type: object
      properties:
        message:
          type: string
          example: Logout successful
        links:
          type: object
          example: https://PixelShare/homepage
    inline_response_200_2:
      type: object
      properties:
        post_id:
          type: integer
        username:
          type: string
        image_url:
          type: string
        caption:
          type: string
        created_at:
          type: string
          format: date-time
        tags:
          type: array
          items:
            type: string
            example: buet_cafeteria
    inline_response_400_1:
      type: object
      properties:
        error:
          type: string
          example: Group not found
        message:
          type: string
          example: The specified group ID does not exist