openapi: 3.0.0

info:
  title: PixelShare API Documentation
  description: |
    Welcome to the PixelShare API Documentation!

    ## Project Overview
    Welcome to PixelShare - Where Moments are Shared and Creativity Finds a Home!
    
    üåê **GitHub Repository:**
    Explore the source code on [GitHub](https://github.com/risenfromashes/pixelshare).

    üé® **About PixelShare:**
    PixelShare is an innovative platform that celebrates visual storytelling, bringing together a vibrant community. Whether you're a photographer, or simply someone who loves sharing pictures, PixelShare enables you to share wonderful moments with your friends and showcase your creativity.

    ## Features
    - **User Profile Management:**
      - View user profile details.
      - Edit user profile information.
      - Delete user profile.
      - Retrieve user's groups and posts.
    - **Group Management:**
      - Create a new group.
      - View group details.
      - Edit group information.
      - Delete a group.
    - **Rules Management:**
      - Get rules for a user.
      - Add a new rule for a user.
      - Delete a specific rule for a user.
      - Update a specific rule for a user.
    - **Post Management:**
      - Create a new post.
      - View all posts in a group.
      - Approve posts by an admin.
      - Delete a post.
      - View post details, including comments and likes.

    - **Tag Management:**
      - Create a new tag.
      - Add or remove tags from a post.
      - Delete a tag.

    - **Admin Moderation:**
      - Add or remove moderators for a group.
      - Leave group moderation.
      - Send moderation requests.

    - **Member Moderation:**
      - View members and their posts.
      - Approve or reject member requests.
      - Remove a member from the group.

    - **Search:**
      - Search for posts based on various parameters.
      - View similar images.
      - Retrieve posts sorted by date, recommendation index, groups, and seen/unseen status.

    - **Newsfeed:**
      - Get a personalized newsfeed of posts.
      - View posts with tags, images, and comments.

    - **Other Functionalities:**
      - User authentication and authorization.
      - Error handling for various scenarios.
      - Interactive API documentation using Swagger UI.
    
    Explore the API documentation to learn more about available endpoints and functionalities.
    
    ## System Architecture
    
    **Frontend:** Will be built with [Svelte](https://svelte.dev/), a simple and popular approach to building user interfaces.
    
    **Backend and API:** Will be build using [SvelteKit](https://kit.svelte.dev/), a full-stack web framework that integrates with svelte.
    
      <p align='center'><img src='https://kit.svelte.dev/images/svelte-kit-horizontal.svg' alt='gmap Logo' width='250'></p>
    

    **Database:** Will utilize [PostgreSQL](https://www.postgresql.org/), an open-source relational database system known for reliability and advanced features. We also use the [pgvector](https://github.com/pgvector/pgvector) extension to store embeddings.
    
      <p align='center'><img src='https://www.vectorlogo.zone/logos/postgresql/postgresql-horizontal.svg' alt='gmap Logo' width='250'></p>
      
    **ML Pipeline:** Will utilize [DINOv2 ViT](https://github.com/facebookresearch/dinov2) and [deepface](https://github.com/serengil/deepface) to extract general image and face embeddings. We will utilize [PyTorch](https://pytorch.org/) as the general machine learning framework.
      <p align='center'>
        <img src='https://www.vectorlogo.zone/logos/pytorch/pytorch-ar21.svg' alt='Logo' width='200'>
      </p>
      
    **Architecture:** Our system will be built using the **microservice** architecture.
      <p align='center'>
        <img src='https://i.ibb.co/6r4H9MF/pixelshare-arch-drawio-3.png' alt='Logo' width='600'>
      </p>

      
    **Containerization:** Our services will be containerized using [docker](https://www.docker.com/) and in the future we would like to use [kubernetes](https://kubernetes.io/) to manage and scale our microservices. But at the moment we are going to host our services on seperate managed platforms to save cost.
      <p align='center'>
        <img src='https://www.vectorlogo.zone/logos/docker/docker-ar21.svg' alt='Logo' width='200'>
      </p>
      
            
    **Deployment:** Currently, to keep all our deployments free of cost we plan to use [Vercel](https://vercel.com/) for frontend services and [Supabase](https://supabase.com/) for database and storage. We plan to run our machine learning services in [Lambda GPU Cloud](https://lambdalabs.com/) or local machines (for testing).
      <p align='center'>
        <img src='https://www.vectorlogo.zone/logos/vercel/vercel-ar21.svg' alt='Logo' width='150'>
        <img src='https://www.vectorlogo.zone/logos/supabase/supabase-ar21.svg' alt='Logo' width='200'>
        <img src='https://lambdalabs.com/hubfs/logos/lambda-logo.svg' alt='Logo' width='170'>
      </p>
    
      
  
        
    **<p>A1-Group7</p>**
    <p>1905005- Ashrafur Rahman</p>
    <p>1905012 - Faria Binta Awal</p>
    <p>1905022 - Fatema Tuj Johora</p>
    
    

  

  contact:
    name: PixelShare Helpline
    email: faria12mou@gmail.com
  

  version: 1.0.1
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/ASHRAFURKHAN37/PixelShare/1.0.1
  - url: https://virtserver.swaggerhub.com/fariamou/PixelShare/1.0.0
    description: SwaggerHub API Auto Mocking
  - url: https://PixelShare.com
paths:
  /register:
    post:
      tags:
        - General
      summary: Register a new user
      description: Endpoint to register a new user.
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/register_body'
        required: true
      responses:
        '200':
          description: User successfully registered
        '400':
          description: Bad request - Invalid input
        '500':
          description: Internal Server Error
  /login:
    post:
      tags:
        - General
      summary: User login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login_body'
        required: true
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        '400':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_400'
  /logout:
    post:
      tags:
        - General
      summary: User logout
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        '400':
          description: Internal Error
  /get-posts/{page}/{pageSize}:
    summary: Operations related to posts
    get:
      summary: Get all posts
      tags:
        - Posts
      parameters:
        - name: page
          in: path
          description: Page number where default value is 1
          required: true
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: path
          description: Number of items per page where default is 10
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    post_id:
                      type: integer
                      example: 1
                    user_id:
                      type: integer
                      example: 12
                    username:
                      type: string
                      example: 'faria12mou'
                    image_url:
                      type: string
                      example: 'https://i.imgur.com/1.jpg'
                    caption:
                      type: string
                      example: 'This is a caption'
                    created_at:
                      type: string
                      format: date-time
                      example: '2021-08-01T00:00:00.000Z'
  /approve-post/{post_id}:
      post:
        summary: Approve a post by post_id
        parameters:
          - name: post_id
            in: path
            required: true
            description: ID of the post to be approved
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin_approval:
                    type: boolean
                    default: true
        tags:
          - Posts
        responses:
          '200':
            description: Successful approval
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Post approved successfully
          '400':
            description: Post not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Post not found
                    message:
                      type: string
                      example: The specified post ID does not exist

  /reject-post/{post_id}:
      post:
        summary: Reject a post by post_id
        parameters:
          - name: post_id
            in: path
            required: true
            description: ID of the post to be rejected
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  admin_approval:
                    type: boolean
                    default: false
        tags:
          - Posts
        responses:
          '200':
            description: Successful rejection
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Post rejected successfully
          '400':
            description: Post not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: Post not found
                    message:
                      type: string
                      example: The specified post ID does not exist
  /delete-post/{post_id}:
    delete:
      summary: Delete a post by post_id for a reason
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID of the post to be deleted
          schema:
            type: integer
      tags:
        - Posts
      responses:
        '200':
          description: Successful post deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post deleted successfully
        '404':
          description: Post not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Post not found
                  message:
                    type: string
                    example: The specified post ID does not exist
                    
  /get-all-members/{group_id}:
    summary: Operations related to members
    get:
      summary: Get all members
      parameters:
          - name: group_id
            in: path
            required: true
            description: ID of the group to view all members
            schema:
              type: integer
              example: 1
      tags:
        - Members
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      example: 'faria12mou'
                    email:
                      type: string
                      example: 'fariamou12@gmail.com'
                    registration_status:
                      type: string
                      example: 'approved'
                      description: Status of member registration (e.g., "pending", "approved", "rejected")

  /member-approve/{user_id}:
    post:
      summary: Approve member registration by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the member to be approved
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_approval:
                  type: boolean
                  default: true
      tags:
        - Members
      responses:
        '200':
          description: Successful member approval
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member approved successfully
        '400':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Member not found
                  message:
                    type: string
                    example: The specified member ID does not exist

  /member-reject/{user_id}:
    post:
      summary: Reject member registration by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the member to be rejected
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                admin_approval:
                  type: boolean
                  default: false
      tags:
        - Members
      responses:
        '200':
          description: Successful member rejection
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member rejected successfully
        '400':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Member not found
                  message:
                    type: string
                    example: The specified member ID does not exi
                    
  /get-member-requests:
    get:
      summary: View member requests with some posts
      tags:
        - Members
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: integer
                      example : 1
                    username:
                      type: string
                      example: 'faria12mou'
                    email:
                      type: string
                      example: 'fariamou12@gmail.com'
                    registration_status:
                      type: string
                      example: 'pending'
                      description: Status of member registration (e.g., "pending")
                      
  /remove-member/{user_id}:
    delete:
      summary: Remove a member by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the member to be removed
          schema:
            type: integer
      tags:
        - Members
      responses:
        '200':
          description: Successful member removal
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Member removed successfully
        '400':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Member not found
                  message:
                    type: string
                    example: The specified member ID does not exist
                    
  /member-details/{user_id}:
    get:
      summary: Get detailed information about a member by user_id
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the member for details retrieval
          schema:
            type: integer
      tags:
        - Members
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: 'faria12mou'
                  is_admin:
                    type: boolean
                    example: false
                  profile_picture:
                    type: string
                    format: uri
                    example: 'https://www.google.com/url?sa=i&url=https%3A%2F%2Fwww.pinterest.com%2Fpin%2F677651075174521837%2F&psig=AOvVaw0QZ6Z4Z4'
                  email:
                    type: string
                    example: faria12mou@gmail.com
                  bio:
                    type: string
                    example: 'I am a student'
                  address:
                    type: string
                    example: 'Dhaka, Bangladesh'
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Member not found
                  message:
                    type: string
                    example: The specified member ID does not exist
                    
  /create-tag:
    post:
      summary: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
                  type: object
                  properties:
                    tag_name:
                      type: string
                      example: 'tag1'
                    username:
                      type: string
                      example: 'faria12mou'
                    time:
                      type: string
                      format: date-time
                      example: '2021-04-01T00:00:00Z'
                    group_id:
                      type: integer
                      example: 1
        
                    description:
                     type: string
                     description: Description of the tag
                     example: 'This is a tag'
      tags:
        - Tags
      responses:
        '200':
          description: Successful tag creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag created successfully
                  tag_id:
                    type: integer
                    example: 101
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid request body

  /add-tag/{post_id}/{tag_id}:
    post:
      summary: Add a tag to a post
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID of the post
          schema:
            type: integer
        - name: tag_id
          in: path
          required: true
          description: ID of the tag to be added
          schema:
            type: integer
      tags:
        - Tags
      responses:
        '200':
          description: Successful tag addition
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag added to the post successfully
        '404':
          description: Post or tag not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Post or tag not found
                  message:
                    type: string
                    example: The specified post or tag ID does not exist

  /remove-tag/{post_id}/{tag_id}:
    delete:
      summary: Remove a tag from a post
      parameters:
        - name: post_id
          in: path
          required: true
          description: ID of the post
          schema:
            type: integer
        - name: tag_id
          in: path
          required: true
          description: ID of the tag to be removed
          schema:
            type: integer
      tags:
        - Tags
      responses:
        '200':
          description: Successful tag removal
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag removed from the post successfully
        '404':
          description: Post or tag not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Post or tag not found
                  message:
                    type: string
                    example: The specified post or tag ID does not exist

  /delete-tag/{tag_id}:
    delete:
      summary: Delete a tag
      parameters:
        - name: tag_id
          in: path
          required: true
          description: ID of the tag to be deleted
          schema:
            type: integer
      tags:
        - Tags
      responses:
        '200':
          description: Successful tag deletion
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag deleted successfully
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Tag not found
                  message:
                    type: string
                    example: The specified tag ID does not exist
  /add-moderator/{group_id}/{user_id}:
    post:
      summary: Add a user as a moderator to a group
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the group
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          description: ID of the user to be added as a moderator
          schema:
            type: integer
      tags:
        - Admin-Moderations
      responses:
        '200':
          description: Successful addition of moderator
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User added as a moderator successfully
        '404':
          description: Group or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Group or user not found
                  message:
                    type: string
                    example: The specified group or user ID does not exist

  /remove-moderator/{group_id}/{user_id}:
    delete:
      summary: Remove a user from the list of moderators in a group
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the group
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          description: ID of the user to be removed from moderators
          schema:
            type: integer
      tags:
        - Admin-Moderations
      responses:
        '200':
          description: Successful removal of moderator
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User removed from moderators successfully
        '404':
          description: Group or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Group or user not found
                  message:
                    type: string
                    example: The specified group or user ID does not exist

  /leave-moderation/{group_id}:
    post:
      summary: Allow a user (moderator) to leave moderation responsibilities for a group
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the group
          schema:
            type: integer
      tags:
        - Admin-Moderations
      responses:
        '200':
          description: Successful leaving of moderation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User left moderation for the group successfully
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Group not found
                  message:
                    type: string
                    example: The specified group ID does not exist

  /send-moderation-request/{group_id}/{user_id}:
    post:
      summary: Send a moderation request to a user for a group
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the group
          schema:
            type: integer
        - name: user_id
          in: path
          required: true
          description: ID of the user to whom the moderation request is sent
          schema:
            type: integer
      tags:
        - Admin-Moderations
      responses:
        '200':
          description: Successful sending of moderation request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Moderation request sent successfully
        '404':
          description: Group or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Group or user not found
                  message:
                    type: string
                    example: The specified group or user ID does not exist
  /search:
    post:
      summary: Search for content
      description: |
        Perform a search based on specified criteria.
      tags: 
        - Search
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Type of content to search for (e.g., post, user, etc.)
                  example: post
                orderby:
                  type: string
                  description: Field to order the results by (e.g., date, relevance, etc.)
                  example: date
                query:
                  type: string
                  description: Search query string
                  example: "CSE FEST"
                topic:
                  type: string
                  description: Topic to narrow down the search
                  example: "CSE FEST'23"
      responses:
        '200':
          description: Successful search
          content:
            application/json:
              schema:
                type: object
                properties:
                  results:
                    type: array
                    description: List of search results
                    items:
                      type: object
                      properties:
                        post_id:
                          type: integer
                          example: 1
                      
                        caption:
                          type: string
                          example: "CSE FEST'23"
                        group_id:
                          type: integer
                          example: 1
                        username:
                          type: string
                          example: "aomy22"
                        date:
                          type: string
                          format: date
                          example: "2021-04-01"
                        images:
                          type: array
                          items:
                            type: object
                            example: 
                              image_id: 1
                              image_url: "https://www.google.com"
                              image_type: "jpg"

                            
                                
                          
                        
                     
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid search criteria
  
  /similar-images/{group_id}/{image_id}:
    get:
      summary: Get similar images
      description: Retrieve a list of images similar to a specified image in a group.
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the group
          schema:
            type: integer
        - name: image_id
          in: path
          required: true
          description: ID of the reference image
          schema:
            type: integer
      tags:
        - Search
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimilarImagesResponse'
        '404':
          description: Image or group not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Image or group not found
                  message:
                    type: string
                    example: The specified image or group ID does not exist
  /images-by-tag/{group_id}/{tag_id}:
    get:
      summary: Get images by tag
      tags:
        - Search
      description: Retrieve a list of images associated with a specific tag in a group.
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the group
          schema:
            type: integer
        - name: tag_id
          in: path
          required: true
          description: ID of the tag
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesByTagResponse'
        '404':
          description: Group or tag not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Group or tag not found
                  message:
                    type: string
                    example: The specified group or tag ID does not exist
  /newsfeed/{user-id}:
    get:
      summary: Get user newsfeed
      tags:
        - User Side
      description: |
        Retrieve a list of posts for a user's newsfeed, sorted by various criteria.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNewsfeedResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist
  /add-post/{group-id}:
    post:
      summary: Add a post to a group
      description: |
        Add a new post to a specific group with tags, images, caption, date, and other parameters.
      parameters:
        - name: group-id
          in: path
          required: true
          description: ID of the group
          schema:
            type: integer
      tags:
        - User Side
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPostRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid request body
  /add-comment/{post-id}/{user-id}:
    post:
      summary: Add a comment to a post
      tags: 
        - User Side
      description: |
        Add a new comment to a specific post using the post ID and user ID.
      parameters:
        - name: post-id
          in: path
          required: true
          description: ID of the post
          schema:
            type: integer
        - name: user-id
          in: path
          required: true
          description: ID of the user adding the comment
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCommentRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddCommentResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid request body
  /add-like/{user-id}/{post-id}:
    post:
      summary: Add a like to a post
      tags:
        - User Side
      description: |
        Add a like to a specific post using the user ID and post ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user liking the post
          schema:
            type: integer
        - name: post-id
          in: path
          required: true
          description: ID of the post
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid request

  /add-dislike/{user-id}/{post-id}:
    post:
      summary: Add a dislike to a post
      tags:
        - User Side
      description: |
        Add a dislike to a specific post using the user ID and post ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user disliking the post
          schema:
            type: integer
        - name: post-id
          in: path
          required: true
          description: ID of the post
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DislikeResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid request
  /get-profile/{user-id}:
    get:
      tags:
        - Profile Management
      summary: Get user profile
      description: |
        Retrieve the detailed profile information for a specific user using the user ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DetailedUserProfileResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist
  /edit-profile/{user-id}:
    put:
      tags:
        - Profile Management
      summary: Edit user profile
      description: |
        Update the profile information for a specific user using the user ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditProfileRequest'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditProfileResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid request body
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist
  /delete-profile/{user-id}:
    delete:
      tags:
        - Profile Management
      summary: Delete user profile
      description: |
        Delete the profile for a specific user using the user ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProfileResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist
  /get-my-groups/{user-id}:
    get:
      summary: Get user's groups
      tags:
        - Profile Management
      description: |
        Retrieve a list of groups that a specific user is a part of using the user ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGroupsResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist
  /get-rules/{user-id}:
    get:
      tags:
        - Rule Management
      summary: Get user's rules
      description: |
        Retrieve a list of rules for a specific user using the user ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRulesResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist

  /add-rule/{user-id}:
    post:
      tags:
        - Rule Management
      summary: Add a rule for the user
      description: |
        Add a new rule for a specific user using the user ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRuleRequest'
      responses:
        '201':
          description: Rule added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid request body
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist

  /delete-rule/{user-id}:
    delete:
      tags:
        - Rule Management
      summary: Delete a rule for the user
      description: |
        Delete a specific rule for a user using the user ID and rule ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
        - name: rule-id
          in: query
          required: true
          description: ID of the rule
          schema:
            type: integer
      responses:
        '200':
          description: Rule deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRuleResponse'
        '404':
          description: Rule not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Rule not found
                  message:
                    type: string
                    example: The specified rule ID does not exist

  /update-rule/{user-id}:
    put:
      tags:
        - Rule Management
      summary: Update a rule for the user
      description: |
        Update a specific rule for a user using the user ID and rule ID.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRuleRequest'
      responses:
        '200':
          description: Rule updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Bad request
                  message:
                    type: string
                    example: Invalid request body
        '404':
          description: Rule not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Rule not found
                  message:
                    type: string
                    example: The specified rule ID does not exist
  /notifications/{user-id}:
    get:
      summary: Get user notifications
      tags:
        - Notification
      description: Retrieve notifications for a specific user.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotificationsResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist

  /notifications/mark-as-read/{user-id}:
    put:
      summary: Mark notifications as read
      tags: 
        - Notification
      description: Mark all notifications as read for a specific user.
      parameters:
        - name: user-id
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
      responses:
        '200':
          description: Notifications marked as read successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarkAsReadResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
                  message:
                    type: string
                    example: The specified user ID does not exist
components:
  schemas:
    UserNotificationsResponse:
      type: object
      properties:
        notifications:
          type: array
          description: List of user notifications
          items:
            type: object
            properties:
              id:
                type: integer
              message:
                type: string
              timestamp:
                type: string
                format: date-time
    MarkAsReadResponse:
      type: object
      properties:
        message:
          type: string
          example: Notifications marked as read successfully
    UserRulesResponse:
      type: object
      properties:
        rules:
          type: array
          description: List of rules for the user
          items:
            $ref: '#/components/schemas/RuleResponse'

    AddRuleRequest:
      type: object
      properties:
        group_id:
          type: integer
        description:
          type: string
        

    UpdateRuleRequest:
      type: object
      properties:
        rule_id:
          type: integer
        group_id:
          type: integer
        description:
          type: string
       

    RuleResponse:
      type: object
      properties:
        rule_id:
          type: integer
        group_id:
          type: integer
        description:
          type: string
        date_created:
          type: string
          format: date-time
        admin_created_by:
          type: string

    DeleteRuleResponse:
      type: object
      properties:
        message:
          type: string
          example: Rule deleted successfully
    UserGroupsResponse:
      type: object
      properties:
        groups:
          type: array
          description: List of groups the user is a part of
          items:
            type: object
            properties:
              group_id:
                type: integer
              group_name:
                type: string
    DeleteProfileResponse:
      type: object
      properties:
        message:
          type: string
          example: Profile deleted successfully
    EditProfileRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        bio:
          type: string
        profile_picture:
          type: string
          format: uri
       

    EditProfileResponse:
      type: object
      properties:
        message:
          type: string
          example: Profile updated successfully
    DetailedUserProfileResponse:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        username:
          type: string
          example: 'fariamou12'
        email:
          type: string
          example: 'fariamou12@gmail.com'
        bio:
          type: string
          example: 'I am a student of BUET'
        profile_picture:
          type: string
          format: uri
          example: 'https://i.imgur.com/4H1kdeY.jpg'
        posts:
          type: array
          description: List of posts by the user
          
          items:
            type: object
            properties:
              post_id:
                type: integer 
                example: 1
              title:
                type: string
                example: 'My first post'
              content:
                type: string
                example: 'This is my first post'
              date:
                type: string
                format: date-time
                example: '2021-04-01T00:00:00.000Z'
        groups:
          type: array
          description: List of groups the user is a part of
          items:
            type: object
            properties:
              group_id:
                type: integer
                example: 1
              group_name:
                type: string
                example: 'BUET CSE-19'
    LikeResponse:
      type: object
      properties:
        message:
          type: string
          example: Like added successfully

    DislikeResponse:
      type: object
      properties:
        message:
          type: string
          example: Dislike added successfully
    AddCommentRequest:
      type: object
      properties:
        comment_text:
          type: string
          example: 'This is a comment'

    AddCommentResponse:
      type: object
      properties:
        message:
          type: string
          example: Comment added successfully
    AddPostRequest:
      type: object
      properties:
        tags:
          type: array
          items:
            type: object
            properties:
              tag_name:
                type: string
                example: 'BUET CSE-19'
        images:
          type: array
          items:
            type: object
            properties:
              image_id:
                type: integer
                example: 1
             
        caption:
          type: string
          example: 'This is a post'
        date:
          type: string
          format: date-time
          example: '2021-04-01T00:00:00.000Z'
        

    AddPostResponse:
      type: object
      properties:
        message:
          type: string
          example: Post added successfully
    UserNewsfeedResponse:
      type: object
      properties:
        posts:
          type: array
          description: List of posts in the user's newsfeed
          items:
            type: object
            properties:
              post_id:
                type: integer
                example: 1
              title:
                type: string
                example: 'My first post'
              content:
                type: string
                example: 'This is my first post'
              date:
                type: string
                format: date-time
                example: '2021-04-01T00:00:00.000Z'
              recommendation_index:
                type: number
                example: 0.5
              groups:
                type: array
                items:
                  type: string
                  example: 'BUET CSE-19'
              seen_by_user:
                type: boolean
                example: true
              tags:
                type: array
                items:
                  type: object
                  properties:
                    tag_id:
                      type: integer
                      example: 1
                    tag_name:
                      type: string
                      example: 'BUET CSE-19'
                    images:
                      type: array
                      items:
                        type: object
                        properties:
                          image_id:
                            type: integer
                            example: 1
    register_body:
      type: object
      properties:
        username:
          type: string
          example: 'fariamou12'
        email:
          type: string
          format: email
          example: 'fariamou12@gmail.com'
        password:
          type: string
          format: password
          example: '123456'
    login_body:
      type: object
      properties:
        username:
          type: string
          example: 'fariamou12'
        password:
          type: string
          format: password
          example: '123456'
    inline_response_200:
      type: object
      properties:
        token:
          type: string
          description: Access token for authenticated user
        userId:
          type: integer
          description: ID of the authenticated user
    inline_response_400:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: Invalid username or password
    inline_response_200_1:
      type: object
      properties:
        message:
          type: string
          example: Logout successful
        links:
          type: object
          example: https://PixelShare/homepage
    inline_response_200_2:
      type: object
      properties:
        post_id:
          type: integer
          example: 1
        username:
          type: string
          example: 'fariamou12'
        image_url:
          type: string
          format: uri
        caption:
          type: string
          example: 'This is a post'
        created_at:
          type: string
          format: date-time
          example: '2021-04-01T00:00:00.000Z'
        tags:
          type: array
          items:
            type: string
            example: buet_cafeteria
    inline_response_400_1:
      type: object
      properties:
        error:
          type: string
          example: Group not found
        message:
          type: string
          example: The specified group ID does not exist
    SimilarImagesResponse:
      type: object
      properties:
        similar_images:
          type: array
          description: List of similar images
          items:
            type: object
            properties:
              image_id:
                type: integer
                example: 1
              caption:
                type: string
                example: 'This is a post'
              post_id:
                type: integer
                example: 1
              date:
                type: string
                format: date
                example: '2021-04-01'
    ImagesByTagResponse:
      type: object
      properties:
        images:
          type: array
          description: List of images associated with the tag
          items:
            type: object
            properties:
              image_id:
                type: integer
                example: 1
              caption:
                type: string
                example: 'This is a post'
              post_id:
                type: integer
                example: 1
              date:
                type: string
                format: date
                example: '2021-04-01'